{"ast":null,"code":"'use strict'; // https://github.com/ipfs/js-ipfs-http-client/issues/569\n\nmodule.exports = function encodeBuffer(buf) {\n  var uriEncoded = '';\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = buf[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var byte = _step.value;\n\n      // https://tools.ietf.org/html/rfc3986#page-14\n      // ALPHA (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D), period (%2E),\n      // underscore (%5F), or tilde (%7E)\n      if (byte >= 0x41 && byte <= 0x5A || byte >= 0x61 && byte <= 0x7A || byte >= 0x30 && byte <= 0x39 || byte === 0x2D || byte === 0x2E || byte === 0x5F || byte === 0x7E) {\n        uriEncoded += String.fromCharCode(byte);\n      } else {\n        uriEncoded += \"%\".concat(byte.toString(16).padStart(2, '0'));\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return uriEncoded;\n};","map":null,"metadata":{},"sourceType":"script"}