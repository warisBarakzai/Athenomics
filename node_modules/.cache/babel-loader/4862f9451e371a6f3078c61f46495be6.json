{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar configure = require('../lib/configure');\n\nvar toFormData = require('../lib/buffer-to-form-data');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dagNode, options) {\n        var cid, serialized, searchParams, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n\n                if (options.hash) {\n                  options.hashAlg = options.hash;\n                  delete options.hash;\n                }\n\n                if (!(options.cid && (options.format || options.hashAlg))) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n\n              case 6:\n                if (!(options.format && !options.hashAlg || !options.format && options.hashAlg)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n\n              case 8:\n                if (options.cid) {\n                  cid = new CID(options.cid);\n                  options = _objectSpread({}, options, {\n                    format: cid.codec,\n                    hashAlg: multihash.decode(cid.multihash).name\n                  });\n                  delete options.cid;\n                }\n\n                options = _objectSpread({\n                  format: 'dag-cbor',\n                  hashAlg: 'sha2-256',\n                  inputEnc: 'raw'\n                }, options);\n\n                if (options.format === 'dag-cbor') {\n                  serialized = dagCBOR.util.serialize(dagNode);\n                } else if (options.format === 'dag-pb') {\n                  serialized = dagNode.serialize();\n                } else {\n                  // FIXME Hopefully already serialized...can we use IPLD to serialise instead?\n                  serialized = dagNode;\n                }\n\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('format', options.format);\n                searchParams.set('hash', options.hashAlg);\n                searchParams.set('input-enc', options.inputEnc);\n                if (options.pin != null) searchParams.set('pin', options.pin);\n                _context.next = 18;\n                return ky.post('dag/put', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams,\n                  body: toFormData(serialized)\n                }).json();\n\n              case 18:\n                res = _context.sent;\n                return _context.abrupt(\"return\", new CID(res.Cid['/']));\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}