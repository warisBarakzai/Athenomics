{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar configure = require('./lib/configure');\n\nvar Tar = require('it-tar');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar CID = require('cids');\n\nvar toIterable = require('stream-to-it/source');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _get = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options) {\n        var searchParams, res, extractor, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, header, body;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams();\n                searchParams.set('arg', \"\".concat(Buffer.isBuffer(path) ? new CID(path) : path));\n\n                if (options.compress !== undefined) {\n                  searchParams.set('compress', options.compress);\n                }\n\n                if (options.compressionLevel !== undefined) {\n                  searchParams.set('compression-level', options.compressionLevel);\n                }\n\n                if (options.offset) {\n                  searchParams.set('offset', options.offset);\n                }\n\n                if (options.length) {\n                  searchParams.set('length', options.length);\n                }\n\n                _context.next = 9;\n                return _awaitAsyncGenerator(ky.post('get', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 9:\n                res = _context.sent;\n                extractor = Tar.extract();\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 13;\n                _iterator = _asyncIterator(extractor(toIterable(res.body)));\n\n              case 15:\n                _context.next = 17;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 17:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 21;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 21:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 34;\n                  break;\n                }\n\n                _value2 = _value, header = _value2.header, body = _value2.body;\n\n                if (!(header.type === 'directory')) {\n                  _context.next = 29;\n                  break;\n                }\n\n                _context.next = 27;\n                return {\n                  path: header.name\n                };\n\n              case 27:\n                _context.next = 31;\n                break;\n\n              case 29:\n                _context.next = 31;\n                return {\n                  path: header.name,\n                  content: body\n                };\n\n              case 31:\n                _iteratorNormalCompletion = true;\n                _context.next = 15;\n                break;\n\n              case 34:\n                _context.next = 40;\n                break;\n\n              case 36:\n                _context.prev = 36;\n                _context.t0 = _context[\"catch\"](13);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 40:\n                _context.prev = 40;\n                _context.prev = 41;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 45;\n                  break;\n                }\n\n                _context.next = 45;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 45:\n                _context.prev = 45;\n\n                if (!_didIteratorError) {\n                  _context.next = 48;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 48:\n                return _context.finish(45);\n\n              case 49:\n                return _context.finish(40);\n\n              case 50:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[13, 36, 40, 50], [41,, 45, 49]]);\n      }));\n\n      function get(_x, _x2) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}