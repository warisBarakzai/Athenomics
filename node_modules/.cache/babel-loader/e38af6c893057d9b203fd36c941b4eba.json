{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar ndjson = require('iterable-ndjson');\n\nvar configure = require('../lib/configure');\n\nvar toIterable = require('stream-to-it/source');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _findPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, ID, Addrs;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', \"\".concat(Buffer.isBuffer(peerId) ? new CID(peerId) : peerId));\n                if (options.verbose != null) searchParams.set('verbose', options.verbose);\n                _context.next = 6;\n                return ky.post('dht/findpeer', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                });\n\n              case 6:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 9;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 11:\n                _context.next = 13;\n                return _iterator.next();\n\n              case 13:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 17;\n                return _step.value;\n\n              case 17:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 51;\n                  break;\n                }\n\n                message = _value;\n\n                if (!(message.Type === 3)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                throw new Error(message.Extra);\n\n              case 22:\n                if (!(message.Type === 2 && message.Responses)) {\n                  _context.next = 48;\n                  break;\n                }\n\n                // There will only be 1:\n                // https://github.com/ipfs/go-ipfs/blob/eb11f569b064b960d1aba4b5b8ca155a3bd2cb21/core/commands/dht.go#L395-L396\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context.prev = 26;\n                _iterator2 = message.Responses[Symbol.iterator]();\n\n              case 28:\n                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                  _context.next = 34;\n                  break;\n                }\n\n                _step2$value = _step2.value, ID = _step2$value.ID, Addrs = _step2$value.Addrs;\n                return _context.abrupt(\"return\", {\n                  id: ID,\n                  addrs: (Addrs || []).map(function (a) {\n                    return multiaddr(a);\n                  })\n                });\n\n              case 31:\n                _iteratorNormalCompletion2 = true;\n                _context.next = 28;\n                break;\n\n              case 34:\n                _context.next = 40;\n                break;\n\n              case 36:\n                _context.prev = 36;\n                _context.t0 = _context[\"catch\"](26);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context.t0;\n\n              case 40:\n                _context.prev = 40;\n                _context.prev = 41;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 43:\n                _context.prev = 43;\n\n                if (!_didIteratorError2) {\n                  _context.next = 46;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 46:\n                return _context.finish(43);\n\n              case 47:\n                return _context.finish(40);\n\n              case 48:\n                _iteratorNormalCompletion = true;\n                _context.next = 11;\n                break;\n\n              case 51:\n                _context.next = 57;\n                break;\n\n              case 53:\n                _context.prev = 53;\n                _context.t1 = _context[\"catch\"](9);\n                _didIteratorError = true;\n                _iteratorError = _context.t1;\n\n              case 57:\n                _context.prev = 57;\n                _context.prev = 58;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 62;\n                  break;\n                }\n\n                _context.next = 62;\n                return _iterator.return();\n\n              case 62:\n                _context.prev = 62;\n\n                if (!_didIteratorError) {\n                  _context.next = 65;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 65:\n                return _context.finish(62);\n\n              case 66:\n                return _context.finish(57);\n\n              case 67:\n                throw new Error('not found');\n\n              case 68:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[9, 53, 57, 67], [26, 36, 40, 48], [41,, 43, 47], [58,, 62, 66]]);\n      }));\n\n      function findPeer(_x, _x2) {\n        return _findPeer.apply(this, arguments);\n      }\n\n      return findPeer;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}