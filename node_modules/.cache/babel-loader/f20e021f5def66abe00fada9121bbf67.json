{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar ndjson = require('iterable-ndjson');\n\nvar toIterable = require('stream-to-it/source');\n\nvar encodeBufferURIComponent = require('../lib/encode-buffer-uri-component');\n\nvar configure = require('../lib/configure');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                if (options.verbose != null) searchParams.set('verbose', options.verbose);\n\n                if (Buffer.isBuffer(key)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('invalid key');\n\n              case 5:\n                _context.next = 7;\n                return ky.post(\"dht/get?key=\".concat(encodeBufferURIComponent(key), \"&\").concat(searchParams), {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers\n                });\n\n              case 7:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 10;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 12:\n                _context.next = 14;\n                return _iterator.next();\n\n              case 14:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 18;\n                return _step.value;\n\n              case 18:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 28;\n                  break;\n                }\n\n                message = _value;\n\n                if (!(message.Type === 3)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                throw new Error(message.Extra);\n\n              case 23:\n                if (!(message.Type === 5)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", message.Extra);\n\n              case 25:\n                _iteratorNormalCompletion = true;\n                _context.next = 12;\n                break;\n\n              case 28:\n                _context.next = 34;\n                break;\n\n              case 30:\n                _context.prev = 30;\n                _context.t0 = _context[\"catch\"](10);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 34:\n                _context.prev = 34;\n                _context.prev = 35;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 39;\n                  break;\n                }\n\n                _context.next = 39;\n                return _iterator.return();\n\n              case 39:\n                _context.prev = 39;\n\n                if (!_didIteratorError) {\n                  _context.next = 42;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 42:\n                return _context.finish(39);\n\n              case 43:\n                return _context.finish(34);\n\n              case 44:\n                throw new Error('not found');\n\n              case 45:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[10, 30, 34, 44], [35,, 39, 43]]);\n      }));\n\n      function get(_x, _x2) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}