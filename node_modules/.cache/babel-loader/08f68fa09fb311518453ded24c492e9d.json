{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar ndjson = require('iterable-ndjson');\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar toIterable = require('stream-to-it/source');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, pin, _i, _Object$keys, cid;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (path && path.type) {\n                  options = path;\n                  path = null;\n                }\n\n                path = path || [];\n                path = Array.isArray(path) ? path : [path];\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('stream', options.stream == null ? true : options.stream);\n                path.forEach(function (p) {\n                  return searchParams.append('arg', \"\".concat(p));\n                });\n                if (options.type) searchParams.set('type', options.type);\n                _context.next = 10;\n                return _awaitAsyncGenerator(ky.post('pin/ls', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 10:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 13;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 15:\n                _context.next = 17;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 17:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 21;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 21:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 39;\n                  break;\n                }\n\n                pin = _value;\n\n                if (!pin.Keys) {\n                  _context.next = 34;\n                  break;\n                }\n\n                _i = 0, _Object$keys = Object.keys(pin.Keys);\n\n              case 26:\n                if (!(_i < _Object$keys.length)) {\n                  _context.next = 33;\n                  break;\n                }\n\n                cid = _Object$keys[_i];\n                _context.next = 30;\n                return {\n                  cid: new CID(cid),\n                  type: pin.Keys[cid].Type\n                };\n\n              case 30:\n                _i++;\n                _context.next = 26;\n                break;\n\n              case 33:\n                return _context.abrupt(\"return\");\n\n              case 34:\n                _context.next = 36;\n                return {\n                  cid: new CID(pin.Cid),\n                  type: pin.Type\n                };\n\n              case 36:\n                _iteratorNormalCompletion = true;\n                _context.next = 15;\n                break;\n\n              case 39:\n                _context.next = 45;\n                break;\n\n              case 41:\n                _context.prev = 41;\n                _context.t0 = _context[\"catch\"](13);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 45:\n                _context.prev = 45;\n                _context.prev = 46;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 50;\n                  break;\n                }\n\n                _context.next = 50;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 50:\n                _context.prev = 50;\n\n                if (!_didIteratorError) {\n                  _context.next = 53;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 53:\n                return _context.finish(50);\n\n              case 54:\n                return _context.finish(45);\n\n              case 55:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[13, 41, 45, 55], [46,, 50, 54]]);\n      }));\n\n      function ls(_x, _x2) {\n        return _ls.apply(this, arguments);\n      }\n\n      return ls;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}