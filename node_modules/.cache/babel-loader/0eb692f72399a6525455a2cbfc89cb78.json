{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar ndjson = require('iterable-ndjson');\n\nvar configure = require('../lib/configure');\n\nvar toIterable = require('stream-to-it/source');\n\nvar toCamel = require('../lib/object-to-camel');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _provide = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cids, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cids = Array.isArray(cids) ? cids : [cids];\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                cids.forEach(function (cid) {\n                  return searchParams.append('arg', \"\".concat(new CID(cid)));\n                });\n                if (options.recursive != null) searchParams.set('recursive', options.recursive);\n                if (options.verbose != null) searchParams.set('verbose', options.verbose);\n                _context.next = 8;\n                return _awaitAsyncGenerator(ky.post('dht/provide', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 8:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 11;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 13:\n                _context.next = 15;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 15:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 19;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 19:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 32;\n                  break;\n                }\n\n                message = _value;\n\n                if (!(message.Type === 3)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                throw new Error(message.Extra);\n\n              case 24:\n                message = toCamel(message);\n                message.id = new CID(message.id);\n\n                if (message.responses) {\n                  message.responses = message.responses.map(function (_ref2) {\n                    var ID = _ref2.ID,\n                        Addrs = _ref2.Addrs;\n                    return {\n                      id: ID,\n                      addrs: (Addrs || []).map(function (a) {\n                        return multiaddr(a);\n                      })\n                    };\n                  });\n                } else {\n                  message.responses = [];\n                }\n\n                _context.next = 29;\n                return message;\n\n              case 29:\n                _iteratorNormalCompletion = true;\n                _context.next = 13;\n                break;\n\n              case 32:\n                _context.next = 38;\n                break;\n\n              case 34:\n                _context.prev = 34;\n                _context.t0 = _context[\"catch\"](11);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 38:\n                _context.prev = 38;\n                _context.prev = 39;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 43;\n                  break;\n                }\n\n                _context.next = 43;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 43:\n                _context.prev = 43;\n\n                if (!_didIteratorError) {\n                  _context.next = 46;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 46:\n                return _context.finish(43);\n\n              case 47:\n                return _context.finish(38);\n\n              case 48:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[11, 34, 38, 48], [39,, 43, 47]]);\n      }));\n\n      function provide(_x, _x2) {\n        return _provide.apply(this, arguments);\n      }\n\n      return provide;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}