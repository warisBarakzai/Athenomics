{"ast":null,"code":"var _defineProperty = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar BufferList = require('bl/BufferList');\n\nvar Reader = require('it-reader');\n\nmodule.exports = function LteReader(source) {\n  var _lteReader;\n\n  var reader = Reader(source);\n  var overflow;\n  var lteReader = (_lteReader = {}, _defineProperty(_lteReader, Symbol.asyncIterator, function () {\n    return lteReader;\n  }), _defineProperty(_lteReader, \"next\", function () {\n    var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(bytes) {\n      var value, _ref, nextValue, done;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!overflow) {\n                _context.next = 22;\n                break;\n              }\n\n              if (!(bytes == null || overflow.length === bytes)) {\n                _context.next = 6;\n                break;\n              }\n\n              value = overflow;\n              overflow = null;\n              _context.next = 21;\n              break;\n\n            case 6:\n              if (!(overflow.length > bytes)) {\n                _context.next = 11;\n                break;\n              }\n\n              value = overflow.shallowSlice(0, bytes);\n              overflow = overflow.shallowSlice(bytes);\n              _context.next = 21;\n              break;\n\n            case 11:\n              if (!(overflow.length < bytes)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 14;\n              return reader.next(bytes - overflow.length);\n\n            case 14:\n              _ref = _context.sent;\n              nextValue = _ref.value;\n              done = _ref.done;\n\n              if (!done) {\n                _context.next = 19;\n                break;\n              }\n\n              throw Object.assign(new Error(\"stream ended before \".concat(bytes - overflow.length, \" bytes became available\")), {\n                code: 'ERR_UNDER_READ'\n              });\n\n            case 19:\n              value = new BufferList([overflow, nextValue]);\n              overflow = null;\n\n            case 21:\n              return _context.abrupt(\"return\", {\n                value: value\n              });\n\n            case 22:\n              return _context.abrupt(\"return\", reader.next(bytes));\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function next(_x) {\n      return _next.apply(this, arguments);\n    }\n\n    return next;\n  }()), _defineProperty(_lteReader, \"nextLte\", function () {\n    var _nextLte = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(bytes) {\n      var _ref2, done, value;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return lteReader.next();\n\n            case 2:\n              _ref2 = _context2.sent;\n              done = _ref2.done;\n              value = _ref2.value;\n\n              if (!done) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                done: done\n              });\n\n            case 7:\n              if (!(value.length <= bytes)) {\n                _context2.next = 9;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                value: value\n              });\n\n            case 9:\n              value = BufferList.isBufferList(value) ? value : new BufferList(value);\n\n              if (overflow) {\n                overflow.append(value.shallowSlice(bytes));\n              } else {\n                overflow = value.shallowSlice(bytes);\n              }\n\n              return _context2.abrupt(\"return\", {\n                value: value.shallowSlice(0, bytes)\n              });\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function nextLte(_x2) {\n      return _nextLte.apply(this, arguments);\n    }\n\n    return nextLte;\n  }()), _defineProperty(_lteReader, \"return\", function _return() {\n    return reader.return();\n  }), _lteReader);\n  return lteReader;\n};","map":null,"metadata":{},"sourceType":"script"}