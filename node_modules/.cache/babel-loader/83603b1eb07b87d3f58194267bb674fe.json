{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar ndjson = require('iterable-ndjson');\n\nvar configure = require('../lib/configure');\n\nvar toIterable = require('stream-to-it/source');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _rm = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, removed;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n\n                if (!Array.isArray(cid)) {\n                  cid = [cid];\n                }\n\n                searchParams = new URLSearchParams();\n                searchParams.set('stream-channels', true);\n                searchParams.set('force', options.force || false);\n                searchParams.set('quiet', options.quiet || false);\n                cid.forEach(function (cid) {\n                  searchParams.append('arg', new CID(cid).toString());\n                });\n                _context.next = 9;\n                return _awaitAsyncGenerator(ky.post('block/rm', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 9:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 12;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 14:\n                _context.next = 16;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 16:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 20;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 20:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 28;\n                  break;\n                }\n\n                removed = _value;\n                _context.next = 25;\n                return toCoreInterface(removed);\n\n              case 25:\n                _iteratorNormalCompletion = true;\n                _context.next = 14;\n                break;\n\n              case 28:\n                _context.next = 34;\n                break;\n\n              case 30:\n                _context.prev = 30;\n                _context.t0 = _context[\"catch\"](12);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 34:\n                _context.prev = 34;\n                _context.prev = 35;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 39;\n                  break;\n                }\n\n                _context.next = 39;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 39:\n                _context.prev = 39;\n\n                if (!_didIteratorError) {\n                  _context.next = 42;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 42:\n                return _context.finish(39);\n\n              case 43:\n                return _context.finish(34);\n\n              case 44:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[12, 30, 34, 44], [35,, 39, 43]]);\n      }));\n\n      function rm(_x, _x2) {\n        return _rm.apply(this, arguments);\n      }\n\n      return rm;\n    }()\n  );\n});\n\nfunction toCoreInterface(removed) {\n  var out = {\n    cid: new CID(removed.Hash)\n  };\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n\n  return out;\n}","map":null,"metadata":{},"sourceType":"script"}