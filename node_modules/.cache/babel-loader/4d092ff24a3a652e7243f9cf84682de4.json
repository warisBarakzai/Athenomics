{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar CID = require('cids');\n\nvar ndjson = require('iterable-ndjson');\n\nvar toIterable = require('stream-to-it/source');\n\nvar configure = require('./lib/configure');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, result, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, link, entry;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams();\n                searchParams.set('arg', \"\".concat(Buffer.isBuffer(path) ? new CID(path) : path));\n                searchParams.set('stream', options.stream == null ? true : options.stream);\n                if (options.long != null) searchParams.set('long', options.long);\n                if (options.unsorted != null) searchParams.set('unsorted', options.unsorted);\n                if (options.recursive != null) searchParams.set('recursive', options.recursive);\n                _context.next = 9;\n                return _awaitAsyncGenerator(ky.post('ls', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 9:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 12;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 14:\n                _context.next = 16;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 16:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 20;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 20:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 64;\n                  break;\n                }\n\n                result = _value;\n                result = result.Objects;\n\n                if (result) {\n                  _context.next = 26;\n                  break;\n                }\n\n                throw new Error('expected .Objects in results');\n\n              case 26:\n                result = result[0];\n\n                if (result) {\n                  _context.next = 29;\n                  break;\n                }\n\n                throw new Error('expected one array in results.Objects');\n\n              case 29:\n                result = result.Links;\n\n                if (Array.isArray(result)) {\n                  _context.next = 32;\n                  break;\n                }\n\n                throw new Error('expected one array in results.Objects[0].Links');\n\n              case 32:\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context.prev = 35;\n                _iterator2 = result[Symbol.iterator]();\n\n              case 37:\n                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                  _context.next = 47;\n                  break;\n                }\n\n                link = _step2.value;\n                entry = {\n                  name: link.Name,\n                  path: path + '/' + link.Name,\n                  size: link.Size,\n                  cid: new CID(link.Hash),\n                  type: typeOf(link),\n                  depth: link.Depth || 1\n                };\n\n                if (link.Mode) {\n                  entry.mode = parseInt(link.Mode, 8);\n                }\n\n                if (link.Mtime !== undefined && link.Mtime !== null) {\n                  entry.mtime = {\n                    secs: link.Mtime\n                  };\n\n                  if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n                    entry.mtime.nsecs = link.MtimeNsecs;\n                  }\n                }\n\n                _context.next = 44;\n                return entry;\n\n              case 44:\n                _iteratorNormalCompletion2 = true;\n                _context.next = 37;\n                break;\n\n              case 47:\n                _context.next = 53;\n                break;\n\n              case 49:\n                _context.prev = 49;\n                _context.t0 = _context[\"catch\"](35);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context.t0;\n\n              case 53:\n                _context.prev = 53;\n                _context.prev = 54;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 56:\n                _context.prev = 56;\n\n                if (!_didIteratorError2) {\n                  _context.next = 59;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 59:\n                return _context.finish(56);\n\n              case 60:\n                return _context.finish(53);\n\n              case 61:\n                _iteratorNormalCompletion = true;\n                _context.next = 14;\n                break;\n\n              case 64:\n                _context.next = 70;\n                break;\n\n              case 66:\n                _context.prev = 66;\n                _context.t1 = _context[\"catch\"](12);\n                _didIteratorError = true;\n                _iteratorError = _context.t1;\n\n              case 70:\n                _context.prev = 70;\n                _context.prev = 71;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 75;\n                  break;\n                }\n\n                _context.next = 75;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 75:\n                _context.prev = 75;\n\n                if (!_didIteratorError) {\n                  _context.next = 78;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 78:\n                return _context.finish(75);\n\n              case 79:\n                return _context.finish(70);\n\n              case 80:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[12, 66, 70, 80], [35, 49, 53, 61], [54,, 56, 60], [71,, 75, 79]]);\n      }));\n\n      function ls(_x, _x2) {\n        return _ls.apply(this, arguments);\n      }\n\n      return ls;\n    }()\n  );\n});\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'unknown';\n  }\n}","map":null,"metadata":{},"sourceType":"script"}