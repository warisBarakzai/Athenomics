{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar ndjson = require('iterable-ndjson');\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar toIterable = require('stream-to-it/source');\n\nvar _require = require('./form-data'),\n    toFormData = _require.toFormData;\n\nvar toCamel = require('../lib/object-to-camel');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _add = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, file;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('stream-channels', true);\n                if (options.chunker) searchParams.set('chunker', options.chunker);\n                if (options.cidVersion) searchParams.set('cid-version', options.cidVersion);\n                if (options.cidBase) searchParams.set('cid-base', options.cidBase);\n                if (options.enableShardingExperiment != null) searchParams.set('enable-sharding-experiment', options.enableShardingExperiment);\n                if (options.hashAlg) searchParams.set('hash', options.hashAlg);\n                if (options.onlyHash != null) searchParams.set('only-hash', options.onlyHash);\n                if (options.pin != null) searchParams.set('pin', options.pin);\n                if (options.progress) searchParams.set('progress', true);\n                if (options.quiet != null) searchParams.set('quiet', options.quiet);\n                if (options.quieter != null) searchParams.set('quieter', options.quieter);\n                if (options.rawLeaves != null) searchParams.set('raw-leaves', options.rawLeaves);\n                if (options.shardSplitThreshold) searchParams.set('shard-split-threshold', options.shardSplitThreshold);\n                if (options.silent) searchParams.set('silent', options.silent);\n                if (options.trickle != null) searchParams.set('trickle', options.trickle);\n                if (options.wrapWithDirectory != null) searchParams.set('wrap-with-directory', options.wrapWithDirectory);\n                if (options.preload != null) searchParams.set('preload', options.preload);\n                if (options.fileImportConcurrency != null) searchParams.set('file-import-concurrency', options.fileImportConcurrency);\n                if (options.blockWriteConcurrency != null) searchParams.set('block-write-concurrency', options.blockWriteConcurrency);\n                _context.t0 = _awaitAsyncGenerator;\n                _context.t1 = ky;\n                _context.t2 = options.timeout;\n                _context.t3 = options.signal;\n                _context.t4 = options.headers;\n                _context.t5 = searchParams;\n                _context.next = 29;\n                return _awaitAsyncGenerator(toFormData(input));\n\n              case 29:\n                _context.t6 = _context.sent;\n                _context.t7 = {\n                  timeout: _context.t2,\n                  signal: _context.t3,\n                  headers: _context.t4,\n                  searchParams: _context.t5,\n                  body: _context.t6\n                };\n                _context.t8 = _context.t1.post.call(_context.t1, 'add', _context.t7);\n                _context.next = 34;\n                return (0, _context.t0)(_context.t8);\n\n              case 34:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 37;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 39:\n                _context.next = 41;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 41:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 45;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 45:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 58;\n                  break;\n                }\n\n                file = _value;\n                file = toCamel(file);\n\n                if (!(options.progress && file.bytes)) {\n                  _context.next = 53;\n                  break;\n                }\n\n                options.progress(file.bytes);\n                _context.next = 55;\n                break;\n\n              case 53:\n                _context.next = 55;\n                return toCoreInterface(file);\n\n              case 55:\n                _iteratorNormalCompletion = true;\n                _context.next = 39;\n                break;\n\n              case 58:\n                _context.next = 64;\n                break;\n\n              case 60:\n                _context.prev = 60;\n                _context.t9 = _context[\"catch\"](37);\n                _didIteratorError = true;\n                _iteratorError = _context.t9;\n\n              case 64:\n                _context.prev = 64;\n                _context.prev = 65;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 69;\n                  break;\n                }\n\n                _context.next = 69;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 69:\n                _context.prev = 69;\n\n                if (!_didIteratorError) {\n                  _context.next = 72;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 72:\n                return _context.finish(69);\n\n              case 73:\n                return _context.finish(64);\n\n              case 74:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[37, 60, 64, 74], [65,, 69, 73]]);\n      }));\n\n      function add(_x, _x2) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n  );\n});\n\nfunction toCoreInterface(_ref2) {\n  var name = _ref2.name,\n      hash = _ref2.hash,\n      size = _ref2.size,\n      mode = _ref2.mode,\n      mtime = _ref2.mtime,\n      mtimeNsecs = _ref2.mtimeNsecs;\n  var output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}","map":null,"metadata":{},"sourceType":"script"}