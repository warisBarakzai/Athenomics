{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Block = require('ipfs-block');\n\nvar CID = require('cids');\n\nvar multihash = require('multihashes');\n\nvar configure = require('../lib/configure');\n\nvar toFormData = require('../lib/buffer-to-form-data');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n\n  function put(_x, _x2) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, options) {\n      var _multihash$decode, name, length, cid, _multihash$decode2, _name, _length, searchParams, res;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n\n              if (Block.isBlock(data)) {\n                _multihash$decode = multihash.decode(data.cid.multihash), name = _multihash$decode.name, length = _multihash$decode.length;\n                options = _objectSpread({}, options, {\n                  format: data.cid.codec,\n                  mhtype: name,\n                  mhlen: length,\n                  version: data.cid.version\n                });\n                data = data.data;\n              } else if (options.cid) {\n                cid = new CID(options.cid);\n                _multihash$decode2 = multihash.decode(cid.multihash), _name = _multihash$decode2.name, _length = _multihash$decode2.length;\n                options = _objectSpread({}, options, {\n                  format: cid.codec,\n                  mhtype: _name,\n                  mhlen: _length,\n                  version: cid.version\n                });\n                delete options.cid;\n              }\n\n              searchParams = new URLSearchParams(options.searchParams);\n              if (options.format) searchParams.set('format', options.format);\n              if (options.mhtype) searchParams.set('mhtype', options.mhtype);\n              if (options.mhlen) searchParams.set('mhlen', options.mhlen);\n              if (options.pin != null) searchParams.set('pin', options.pin);\n              if (options.version != null) searchParams.set('version', options.version);\n              _context.prev = 8;\n              _context.next = 11;\n              return ky.post('block/put', {\n                timeout: options.timeout,\n                signal: options.signal,\n                headers: options.headers,\n                searchParams: searchParams,\n                body: toFormData(data)\n              }).json();\n\n            case 11:\n              res = _context.sent;\n              _context.next = 23;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](8);\n\n              if (!(options.format === 'dag-pb')) {\n                _context.next = 20;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread({}, options, {\n                format: 'protobuf'\n              })));\n\n            case 20:\n              if (!(options.format === 'dag-cbor')) {\n                _context.next = 22;\n                break;\n              }\n\n              return _context.abrupt(\"return\", put(data, _objectSpread({}, options, {\n                format: 'cbor'\n              })));\n\n            case 22:\n              throw _context.t0;\n\n            case 23:\n              return _context.abrupt(\"return\", new Block(data, new CID(res.Key)));\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 14]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return put;\n});","map":null,"metadata":{},"sourceType":"script"}