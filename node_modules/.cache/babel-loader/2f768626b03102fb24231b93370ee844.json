{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar multiaddr = require('multiaddr');\n\nvar configure = require('../lib/configure');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var searchParams, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                if (options.direction != null) searchParams.append('direction', options.direction);\n                if (options.latency != null) searchParams.append('latency', options.latency);\n                if (options.streams != null) searchParams.append('streams', options.streams);\n                if (options.verbose != null) searchParams.append('verbose', options.verbose);\n                _context.next = 8;\n                return ky.post('swarm/peers', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }).json();\n\n              case 8:\n                res = _context.sent;\n                return _context.abrupt(\"return\", (res.Peers || []).map(function (peer) {\n                  var info = {};\n\n                  try {\n                    info.addr = multiaddr(peer.Addr);\n                    info.peer = peer.Peer;\n                  } catch (error) {\n                    info.error = error;\n                    info.rawPeerInfo = peer;\n                  }\n\n                  if (peer.Muxer) {\n                    info.muxer = peer.Muxer;\n                  }\n\n                  if (peer.Latency) {\n                    info.latency = peer.Latency;\n                  }\n\n                  if (peer.Streams) {\n                    info.streams = peer.Streams;\n                  }\n\n                  if (peer.Direction != null) {\n                    info.direction = peer.Direction;\n                  }\n\n                  return info;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}