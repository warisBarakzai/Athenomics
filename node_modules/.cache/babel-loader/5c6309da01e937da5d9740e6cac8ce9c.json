{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar BufferList = require('bl/BufferList');\n\nvar _require2 = require('fs-constants'),\n    S_IFMT = _require2.S_IFMT,\n    S_IFBLK = _require2.S_IFBLK,\n    S_IFCHR = _require2.S_IFCHR,\n    S_IFDIR = _require2.S_IFDIR,\n    S_IFIFO = _require2.S_IFIFO,\n    S_IFLNK = _require2.S_IFLNK;\n\nvar concat = require('it-concat');\n\nvar Headers = require('./pack-headers');\n\nvar DMODE = parseInt('755', 8);\nvar FMODE = parseInt('644', 8);\nvar END_OF_TAR = Buffer.alloc(1024);\n\nfunction modeToType(mode) {\n  switch (mode & S_IFMT) {\n    case S_IFBLK:\n      return 'block-device';\n\n    case S_IFCHR:\n      return 'character-device';\n\n    case S_IFDIR:\n      return 'directory';\n\n    case S_IFIFO:\n      return 'fifo';\n\n    case S_IFLNK:\n      return 'symlink';\n  }\n\n  return 'file';\n}\n\nfunction getPadding(size) {\n  size &= 511;\n  if (size) return new BufferList(END_OF_TAR.slice(0, 512 - size));\n}\n\nfunction encode(header) {\n  if (!header.pax) {\n    var encoded = Headers.encode(header);\n    if (encoded) return encoded;\n  }\n\n  return encodePax(header);\n}\n\nfunction encodePax(header) {\n  var paxHeader = Headers.encodePax({\n    name: header.name,\n    linkname: header.linkname,\n    pax: header.pax\n  });\n  var newHeader = {\n    name: 'PaxHeader',\n    mode: header.mode,\n    uid: header.uid,\n    gid: header.gid,\n    size: paxHeader.length,\n    mtime: header.mtime,\n    type: 'pax-header',\n    linkname: header.linkname && 'PaxHeader',\n    uname: header.uname,\n    gname: header.gname,\n    devmajor: header.devmajor,\n    devminor: header.devminor\n  };\n  return new BufferList([Headers.encode(newHeader), paxHeader, getPadding(paxHeader.length), Headers.encode(_objectSpread({}, newHeader, {\n    size: header.size,\n    type: header.type\n  }))]);\n}\n\nmodule.exports = function () {\n  return (/*#__PURE__*/function () {\n      var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value3, header, body, written, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, chunk, overflow;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 2;\n                _iterator = _asyncIterator(source);\n\n              case 4:\n                _context.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 10;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 10:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 81;\n                  break;\n                }\n\n                _value3 = _value, header = _value3.header, body = _value3.body;\n                if (!header.size || header.type === 'symlink') header.size = 0;\n                if (!header.type) header.type = modeToType(header.mode);\n                if (!header.mode) header.mode = header.type === 'directory' ? DMODE : FMODE;\n                if (!header.uid) header.uid = 0;\n                if (!header.gid) header.gid = 0;\n                if (!header.mtime) header.mtime = new Date();\n                if (typeof body === 'string') body = Buffer.from(body);\n\n                if (!(Buffer.isBuffer(body) || BufferList.isBufferList(body))) {\n                  _context.next = 25;\n                  break;\n                }\n\n                header.size = body.length;\n                _context.next = 24;\n                return new BufferList([encode(header), body, getPadding(header.size)]);\n\n              case 24:\n                return _context.abrupt(\"continue\", 78);\n\n              case 25:\n                if (!(header.type === 'symlink' && !header.linkname)) {\n                  _context.next = 32;\n                  break;\n                }\n\n                _context.next = 28;\n                return _awaitAsyncGenerator(concat(body));\n\n              case 28:\n                header.linkname = _context.sent.toString();\n                _context.next = 31;\n                return encode(header);\n\n              case 31:\n                return _context.abrupt(\"continue\", 78);\n\n              case 32:\n                _context.next = 34;\n                return encode(header);\n\n              case 34:\n                if (!(header.type !== 'file' && header.type !== 'contiguous-file')) {\n                  _context.next = 36;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 78);\n\n              case 36:\n                written = 0;\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _context.prev = 39;\n                _iterator2 = _asyncIterator(body);\n\n              case 41:\n                _context.next = 43;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 43:\n                _step2 = _context.sent;\n                _iteratorNormalCompletion2 = _step2.done;\n                _context.next = 47;\n                return _awaitAsyncGenerator(_step2.value);\n\n              case 47:\n                _value2 = _context.sent;\n\n                if (_iteratorNormalCompletion2) {\n                  _context.next = 56;\n                  break;\n                }\n\n                chunk = _value2;\n                written += chunk.length;\n                _context.next = 53;\n                return BufferList.isBufferList(chunk) ? chunk : new BufferList(chunk);\n\n              case 53:\n                _iteratorNormalCompletion2 = true;\n                _context.next = 41;\n                break;\n\n              case 56:\n                _context.next = 62;\n                break;\n\n              case 58:\n                _context.prev = 58;\n                _context.t0 = _context[\"catch\"](39);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context.t0;\n\n              case 62:\n                _context.prev = 62;\n                _context.prev = 63;\n\n                if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                  _context.next = 67;\n                  break;\n                }\n\n                _context.next = 67;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 67:\n                _context.prev = 67;\n\n                if (!_didIteratorError2) {\n                  _context.next = 70;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 70:\n                return _context.finish(67);\n\n              case 71:\n                return _context.finish(62);\n\n              case 72:\n                if (!(written !== header.size)) {\n                  _context.next = 74;\n                  break;\n                }\n\n                throw new Error('size mismatch');\n\n              case 74:\n                overflow = getPadding(header.size);\n\n                if (!overflow) {\n                  _context.next = 78;\n                  break;\n                }\n\n                _context.next = 78;\n                return overflow;\n\n              case 78:\n                _iteratorNormalCompletion = true;\n                _context.next = 4;\n                break;\n\n              case 81:\n                _context.next = 87;\n                break;\n\n              case 83:\n                _context.prev = 83;\n                _context.t1 = _context[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context.t1;\n\n              case 87:\n                _context.prev = 87;\n                _context.prev = 88;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 92;\n                  break;\n                }\n\n                _context.next = 92;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 92:\n                _context.prev = 92;\n\n                if (!_didIteratorError) {\n                  _context.next = 95;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 95:\n                return _context.finish(92);\n\n              case 96:\n                return _context.finish(87);\n\n              case 97:\n                _context.next = 99;\n                return new BufferList(END_OF_TAR);\n\n              case 99:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 83, 87, 97], [39, 58, 62, 72], [63,, 67, 71], [88,, 92, 96]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":null,"metadata":{},"sourceType":"script"}