{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('ky-universal'),\n    HTTPError = _require.HTTPError;\n\nvar log = require('debug')('ipfs-http-client:lib:error-handler');\n\nvar _require2 = require('ipfs-utils/src/env'),\n    isNode = _require2.isNode,\n    isElectronMain = _require2.isElectronMain;\n\nfunction isJsonResponse(res) {\n  return (res.headers.get('Content-Type') || '').startsWith('application/json');\n}\n\nmodule.exports = /*#__PURE__*/function () {\n  var _errorHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, options, response) {\n    var msg, data, error;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!response.ok) {\n              _context.next = 3;\n              break;\n            }\n\n            // FIXME: remove when fixed https://github.com/sindresorhus/ky-universal/issues/8\n            //\n            // ky clones the response for each handler. In Node.js the response body is\n            // piped to 2 PassThroughs, one becomes the real body and the other is used\n            // in the clone.\n            //\n            // If the body in the clone is not consumed or destroyed the highwater mark\n            // will be reached (for large payloads) and stop the real body from flowing.\n            if (isNode || isElectronMain) response.body.destroy();\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.prev = 3;\n\n            if (!isJsonResponse(response)) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            data = _context.sent;\n            log(data);\n            msg = data.Message || data.message;\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.next = 14;\n            return response.text();\n\n          case 14:\n            msg = _context.sent;\n\n          case 15:\n            _context.next = 21;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](3);\n            log('Failed to parse error response', _context.t0); // Failed to extract/parse error message from response\n\n            msg = _context.t0.message;\n\n          case 21:\n            error = new HTTPError(response); // If we managed to extract a message from the response, use it\n\n            if (msg) {\n              error.message = msg;\n            }\n\n            throw error;\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 17]]);\n  }));\n\n  function errorHandler(_x, _x2, _x3) {\n    return _errorHandler.apply(this, arguments);\n  }\n\n  return errorHandler;\n}();","map":null,"metadata":{},"sourceType":"script"}