{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar configure = require('../lib/configure');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar CID = require('cids');\n\nvar ndjson = require('iterable-ndjson');\n\nvar toIterable = require('stream-to-it/source');\n\nvar toCamel = require('../lib/object-to-camel');\n\nmodule.exports = function (config) {\n  var refs = configure(function (_ref) {\n    var ky = _ref.ky;\n    return (/*#__PURE__*/function () {\n        var _refs = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(args, options) {\n          var searchParams, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, arg, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, file;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  options = options || {};\n                  searchParams = new URLSearchParams();\n\n                  if (options.format !== undefined) {\n                    searchParams.set('format', options.format);\n                  }\n\n                  if (options.edges !== undefined) {\n                    searchParams.set('edges', options.edges);\n                  }\n\n                  if (options.unique !== undefined) {\n                    searchParams.set('unique', options.unique);\n                  }\n\n                  if (options.recursive !== undefined) {\n                    searchParams.set('recursive', options.recursive);\n                  }\n\n                  if (options.maxDepth !== undefined) {\n                    searchParams.set('max-depth', options.maxDepth);\n                  }\n\n                  if (!Array.isArray(args)) {\n                    args = [args];\n                  }\n\n                  _iteratorNormalCompletion2 = true;\n                  _didIteratorError2 = false;\n                  _iteratorError2 = undefined;\n                  _context.prev = 11;\n\n                  for (_iterator2 = args[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    arg = _step2.value;\n                    searchParams.append('arg', \"\".concat(Buffer.isBuffer(arg) ? new CID(arg) : arg));\n                  }\n\n                  _context.next = 19;\n                  break;\n\n                case 15:\n                  _context.prev = 15;\n                  _context.t0 = _context[\"catch\"](11);\n                  _didIteratorError2 = true;\n                  _iteratorError2 = _context.t0;\n\n                case 19:\n                  _context.prev = 19;\n                  _context.prev = 20;\n\n                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                    _iterator2.return();\n                  }\n\n                case 22:\n                  _context.prev = 22;\n\n                  if (!_didIteratorError2) {\n                    _context.next = 25;\n                    break;\n                  }\n\n                  throw _iteratorError2;\n\n                case 25:\n                  return _context.finish(22);\n\n                case 26:\n                  return _context.finish(19);\n\n                case 27:\n                  _context.next = 29;\n                  return _awaitAsyncGenerator(ky.post('refs', {\n                    timeout: options.timeout,\n                    signal: options.signal,\n                    headers: options.headers,\n                    searchParams: searchParams\n                  }));\n\n                case 29:\n                  res = _context.sent;\n                  _iteratorNormalCompletion = true;\n                  _didIteratorError = false;\n                  _context.prev = 32;\n                  _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n                case 34:\n                  _context.next = 36;\n                  return _awaitAsyncGenerator(_iterator.next());\n\n                case 36:\n                  _step = _context.sent;\n                  _iteratorNormalCompletion = _step.done;\n                  _context.next = 40;\n                  return _awaitAsyncGenerator(_step.value);\n\n                case 40:\n                  _value = _context.sent;\n\n                  if (_iteratorNormalCompletion) {\n                    _context.next = 48;\n                    break;\n                  }\n\n                  file = _value;\n                  _context.next = 45;\n                  return toCamel(file);\n\n                case 45:\n                  _iteratorNormalCompletion = true;\n                  _context.next = 34;\n                  break;\n\n                case 48:\n                  _context.next = 54;\n                  break;\n\n                case 50:\n                  _context.prev = 50;\n                  _context.t1 = _context[\"catch\"](32);\n                  _didIteratorError = true;\n                  _iteratorError = _context.t1;\n\n                case 54:\n                  _context.prev = 54;\n                  _context.prev = 55;\n\n                  if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                    _context.next = 59;\n                    break;\n                  }\n\n                  _context.next = 59;\n                  return _awaitAsyncGenerator(_iterator.return());\n\n                case 59:\n                  _context.prev = 59;\n\n                  if (!_didIteratorError) {\n                    _context.next = 62;\n                    break;\n                  }\n\n                  throw _iteratorError;\n\n                case 62:\n                  return _context.finish(59);\n\n                case 63:\n                  return _context.finish(54);\n\n                case 64:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[11, 15, 19, 27], [20,, 22, 26], [32, 50, 54, 64], [55,, 59, 63]]);\n        }));\n\n        function refs(_x, _x2) {\n          return _refs.apply(this, arguments);\n        }\n\n        return refs;\n      }()\n    );\n  })(config);\n  refs.local = require('./local')(config);\n  return refs;\n};","map":null,"metadata":{},"sourceType":"script"}