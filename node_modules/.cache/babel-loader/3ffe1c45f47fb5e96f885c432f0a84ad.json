{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar configure = require('../lib/configure');\n\nvar toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options) {\n        var searchParams, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (typeof path !== 'string') {\n                  options = path;\n                  path = '/';\n                }\n\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', path);\n                if (options.cidBase) searchParams.set('cid-base', options.cidBase);\n                if (options.hash != null) searchParams.set('hash', options.hash);\n                if (options.size != null) searchParams.set('size', options.size);\n                if (options.withLocal != null) searchParams.set('with-local', options.withLocal);\n                _context.next = 10;\n                return ky.post('files/stat', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }).json();\n\n              case 10:\n                res = _context.sent;\n                res.WithLocality = res.WithLocality || false;\n                return _context.abrupt(\"return\", toCoreInterface(toCamelWithMetadata(res)));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n});\n\nfunction toCoreInterface(entry) {\n  entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":null,"metadata":{},"sourceType":"script"}