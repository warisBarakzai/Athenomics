{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _objectSpread = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar ky = require('ky-universal').default;\n\nvar _require = require('ipfs-utils/src/env'),\n    isBrowser = _require.isBrowser,\n    isWebWorker = _require.isWebWorker;\n\nvar toUri = require('multiaddr-to-uri');\n\nvar errorHandler = require('./error-handler');\n\nvar mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nvar parseDuration = require('parse-duration'); // Set default configuration and call create function with them\n\n\nmodule.exports = function (create) {\n  return function (config) {\n    config = config || {};\n\n    if (typeof config === 'string') {\n      config = {\n        apiAddr: config\n      };\n    } else if (config.constructor && config.constructor.isMultiaddr) {\n      config = {\n        apiAddr: config\n      };\n    } else {\n      config = _objectSpread({}, config);\n    }\n\n    config.apiAddr = (config.apiAddr || getDefaultApiAddr(config)).toString();\n    config.apiAddr = config.apiAddr.startsWith('/') ? toUri(config.apiAddr) : config.apiAddr;\n    config.apiAddr = trimEnd(config.apiAddr, '/');\n    var apiAddrPath = getNonRootPath(config.apiAddr); // Use configured apiPath, or path on the end of apiAddr (if there is one) or default to /api/v0\n\n    config.apiPath = config.apiPath || config['api-path'] || apiAddrPath || '/api/v0';\n    config.apiPath = trimEnd(config.apiPath, '/'); // If user passed apiAddr with a path, trim it from the end (it is now apiPath)\n\n    config.apiAddr = apiAddrPath ? trimEnd(config.apiAddr, apiAddrPath) : config.apiAddr;\n    var defaults = {\n      prefixUrl: config.apiAddr + config.apiPath,\n      timeout: parseTimeout(config.timeout) || 60000 * 20,\n      headers: config.headers,\n      hooks: {\n        afterResponse: [errorHandler]\n      }\n    };\n    var k = ky.extend(defaults);\n    var client = ['get', 'post', 'put', 'delete', 'patch', 'head'].reduce(function (client, key) {\n      client[key] = wrap(k[key], defaults);\n      return client;\n    }, wrap(k, defaults));\n    return create(_objectSpread({\n      ky: client\n    }, config));\n  };\n};\n\nfunction getDefaultApiAddr(_ref) {\n  var protocol = _ref.protocol,\n      host = _ref.host,\n      port = _ref.port;\n\n  if (isBrowser || isWebWorker) {\n    if (!protocol) {\n      protocol = location.protocol.startsWith('http') ? trimEnd(location.protocol, ':') : 'http';\n    }\n\n    host = host || location.hostname;\n    port = port || location.port;\n    return \"\".concat(protocol, \"://\").concat(host).concat(port ? ':' + port : '');\n  }\n\n  return \"\".concat(protocol || 'http', \"://\").concat(host || 'localhost', \":\").concat(port || 5001);\n} // returns the passed function wrapped in a function that ignores\n// undefined values in the passed `options` object\n\n\nfunction wrap(fn, defaults) {\n  return function (input, options) {\n    if (options.timeout) options.timeout = parseTimeout(options.timeout);\n    return fn(input, mergeOptions(defaults, options));\n  };\n}\n\nfunction parseTimeout(value) {\n  return typeof value === 'string' ? parseDuration(value) : value;\n}\n\nvar trimEnd = function trimEnd(str, end) {\n  return str.endsWith(end) ? str.slice(0, -end.length) : str;\n}; // Get the path from a URL is it is not /\n\n\nfunction getNonRootPath(url) {\n  if (url) {\n    var _ref2 = new URL(url),\n        pathname = _ref2.pathname;\n\n    return pathname === '/' ? null : pathname;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}