{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar multiaddr = require('multiaddr');\n\nvar ndjson = require('iterable-ndjson');\n\nvar configure = require('../lib/configure');\n\nvar toIterable = require('stream-to-it/source');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _findProvs = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, ID, Addrs;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', \"\".concat(new CID(cid)));\n                if (options.numProviders) searchParams.set('num-providers', options.numProviders);\n                if (options.verbose != null) searchParams.set('verbose', options.verbose);\n                _context.next = 7;\n                return _awaitAsyncGenerator(ky.post('dht/findprovs', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 7:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 10;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 12:\n                _context.next = 14;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 14:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 18;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 18:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 53;\n                  break;\n                }\n\n                message = _value;\n\n                if (!(message.Type === 3)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                throw new Error(message.Extra);\n\n              case 23:\n                if (!(message.Type === 4 && message.Responses)) {\n                  _context.next = 50;\n                  break;\n                }\n\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context.prev = 27;\n                _iterator2 = message.Responses[Symbol.iterator]();\n\n              case 29:\n                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                  _context.next = 36;\n                  break;\n                }\n\n                _step2$value = _step2.value, ID = _step2$value.ID, Addrs = _step2$value.Addrs;\n                _context.next = 33;\n                return {\n                  id: ID,\n                  addrs: (Addrs || []).map(function (a) {\n                    return multiaddr(a);\n                  })\n                };\n\n              case 33:\n                _iteratorNormalCompletion2 = true;\n                _context.next = 29;\n                break;\n\n              case 36:\n                _context.next = 42;\n                break;\n\n              case 38:\n                _context.prev = 38;\n                _context.t0 = _context[\"catch\"](27);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context.t0;\n\n              case 42:\n                _context.prev = 42;\n                _context.prev = 43;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 45:\n                _context.prev = 45;\n\n                if (!_didIteratorError2) {\n                  _context.next = 48;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 48:\n                return _context.finish(45);\n\n              case 49:\n                return _context.finish(42);\n\n              case 50:\n                _iteratorNormalCompletion = true;\n                _context.next = 12;\n                break;\n\n              case 53:\n                _context.next = 59;\n                break;\n\n              case 55:\n                _context.prev = 55;\n                _context.t1 = _context[\"catch\"](10);\n                _didIteratorError = true;\n                _iteratorError = _context.t1;\n\n              case 59:\n                _context.prev = 59;\n                _context.prev = 60;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 64;\n                  break;\n                }\n\n                _context.next = 64;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 64:\n                _context.prev = 64;\n\n                if (!_didIteratorError) {\n                  _context.next = 67;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 67:\n                return _context.finish(64);\n\n              case 68:\n                return _context.finish(59);\n\n              case 69:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[10, 55, 59, 69], [27, 38, 42, 50], [43,, 45, 49], [60,, 64, 68]]);\n      }));\n\n      function findProvs(_x, _x2) {\n        return _findProvs.apply(this, arguments);\n      }\n\n      return findProvs;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}