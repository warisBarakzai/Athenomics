{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar ndjson = require('iterable-ndjson');\n\nvar toIterable = require('stream-to-it/source');\n\nvar configure = require('../lib/configure');\n\nvar toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, result, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, entry;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (typeof path !== 'string') {\n                  options = path;\n                  path = '/';\n                }\n\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', CID.isCID(path) ? \"/ipfs/\".concat(path) : path);\n                searchParams.set('stream', options.stream == null ? true : options.stream);\n                if (options.cidBase) searchParams.set('cid-base', options.cidBase);\n                searchParams.set('long', options.long == null ? true : options.long); // TODO: remove after go-ipfs 0.5 is released\n\n                searchParams.set('l', options.long == null ? true : options.long);\n                _context.next = 10;\n                return _awaitAsyncGenerator(ky.post('files/ls', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 10:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 13;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 15:\n                _context.next = 17;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 17:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 21;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 21:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 58;\n                  break;\n                }\n\n                result = _value;\n\n                if (!('Entries' in result)) {\n                  _context.next = 53;\n                  break;\n                }\n\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _iteratorError2 = undefined;\n                _context.prev = 28;\n                _iterator2 = (result.Entries || [])[Symbol.iterator]();\n\n              case 30:\n                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                  _context.next = 37;\n                  break;\n                }\n\n                entry = _step2.value;\n                _context.next = 34;\n                return toCoreInterface(toCamelWithMetadata(entry));\n\n              case 34:\n                _iteratorNormalCompletion2 = true;\n                _context.next = 30;\n                break;\n\n              case 37:\n                _context.next = 43;\n                break;\n\n              case 39:\n                _context.prev = 39;\n                _context.t0 = _context[\"catch\"](28);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context.t0;\n\n              case 43:\n                _context.prev = 43;\n                _context.prev = 44;\n\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n\n              case 46:\n                _context.prev = 46;\n\n                if (!_didIteratorError2) {\n                  _context.next = 49;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 49:\n                return _context.finish(46);\n\n              case 50:\n                return _context.finish(43);\n\n              case 51:\n                _context.next = 55;\n                break;\n\n              case 53:\n                _context.next = 55;\n                return toCoreInterface(toCamelWithMetadata(result));\n\n              case 55:\n                _iteratorNormalCompletion = true;\n                _context.next = 15;\n                break;\n\n              case 58:\n                _context.next = 64;\n                break;\n\n              case 60:\n                _context.prev = 60;\n                _context.t1 = _context[\"catch\"](13);\n                _didIteratorError = true;\n                _iteratorError = _context.t1;\n\n              case 64:\n                _context.prev = 64;\n                _context.prev = 65;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 69;\n                  break;\n                }\n\n                _context.next = 69;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 69:\n                _context.prev = 69;\n\n                if (!_didIteratorError) {\n                  _context.next = 72;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 72:\n                return _context.finish(69);\n\n              case 73:\n                return _context.finish(64);\n\n              case 74:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[13, 60, 64, 74], [28, 39, 43, 51], [44,, 46, 50], [65,, 69, 73]]);\n      }));\n\n      function ls(_x, _x2) {\n        return _ls.apply(this, arguments);\n      }\n\n      return ls;\n    }()\n  );\n});\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":null,"metadata":{},"sourceType":"script"}