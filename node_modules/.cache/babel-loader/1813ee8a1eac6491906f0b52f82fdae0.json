{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar toFormData = require('../lib/buffer-to-form-data');\n\nvar modeToString = require('../lib/mode-to-string');\n\nvar mtimeToObject = require('../lib/mtime-to-object');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, input, options) {\n        var mtime, searchParams, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                mtime = mtimeToObject(options.mtime);\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', path);\n                searchParams.set('stream-channels', true);\n                if (options.cidVersion) searchParams.set('cid-version', options.cidVersion);\n                if (options.create != null) searchParams.set('create', options.create);\n                if (options.hashAlg) searchParams.set('hash', options.hashAlg);\n                if (options.length != null) searchParams.set('length', options.length);\n                if (options.offset != null) searchParams.set('offset', options.offset);\n                if (options.parents != null) searchParams.set('parents', options.parents);\n                if (options.rawLeaves != null) searchParams.set('raw-leaves', options.rawLeaves);\n                if (options.truncate != null) searchParams.set('truncate', options.truncate);\n                if (options.shardSplitThreshold != null) searchParams.set('shardSplitThreshold', options.shardSplitThreshold);\n\n                if (mtime) {\n                  searchParams.set('mtime', mtime.secs);\n\n                  if (mtime.nsecs != null) {\n                    searchParams.set('mtimeNsecs', mtime.nsecs);\n                  }\n                }\n\n                _context.next = 17;\n                return ky.post('files/write', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams,\n                  body: toFormData(input, {\n                    mode: options.mode != null ? modeToString(options.mode) : undefined,\n                    mtime: mtime ? mtime.secs : undefined,\n                    mtimeNsecs: mtime ? mtime.nsecs : undefined\n                  }) // TODO: support inputs other than buffer as per spec\n\n                });\n\n              case 17:\n                res = _context.sent;\n                return _context.abrupt(\"return\", res.text());\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}