{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar ndjson = require('iterable-ndjson');\n\nvar bs58 = require('bs58');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nvar configure = require('../lib/configure');\n\nvar toIterable = require('stream-to-it/source');\n\nvar SubscriptionTracker = require('./subscription-tracker');\n\nmodule.exports = configure(function (config) {\n  var ky = config.ky;\n  var subsTracker = SubscriptionTracker.singleton();\n\n  var publish = require('./publish')(config);\n\n  return (/*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(topic, handler, options) {\n        var searchParams, res, ffWorkaround;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = options || {};\n                options.signal = subsTracker.subscribe(topic, handler, options.signal);\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', topic);\n                if (options.discover != null) searchParams.set('discover', options.discover);\n                // In Firefox, the initial call to fetch does not resolve until some data\n                // is received. If this doesn't happen within 1 second send an empty message\n                // to kickstart the process.\n                ffWorkaround = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          log(\"Publishing empty message to \\\"\".concat(topic, \"\\\" to resolve subscription request\"));\n                          _context.prev = 1;\n                          _context.next = 4;\n                          return publish(topic, Buffer.alloc(0), options);\n\n                        case 4:\n                          _context.next = 9;\n                          break;\n\n                        case 6:\n                          _context.prev = 6;\n                          _context.t0 = _context[\"catch\"](1);\n                          log('Failed to publish empty message', _context.t0);\n\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[1, 6]]);\n                })), 1000);\n                _context2.prev = 6;\n                _context2.next = 9;\n                return ky.post('pubsub/sub', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                });\n\n              case 9:\n                res = _context2.sent;\n                _context2.next = 16;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](6);\n                // Initial subscribe fail, ensure we clean up\n                subsTracker.unsubscribe(topic, handler);\n                throw _context2.t0;\n\n              case 16:\n                clearTimeout(ffWorkaround);\n                readMessages(ndjson(toIterable(res.body)), {\n                  onMessage: handler,\n                  onEnd: function onEnd() {\n                    return subsTracker.unsubscribe(topic, handler);\n                  },\n                  onError: options.onError\n                });\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[6, 12]]);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n});\n\nfunction readMessages(_x4, _x5) {\n  return _readMessages.apply(this, arguments);\n}\n\nfunction _readMessages() {\n  _readMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(msgStream, _ref3) {\n    var onMessage, onEnd, onError, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, msg;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            onMessage = _ref3.onMessage, onEnd = _ref3.onEnd, onError = _ref3.onError;\n            onError = onError || log;\n            _context3.prev = 2;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context3.prev = 5;\n            _iterator = _asyncIterator(msgStream);\n\n          case 7:\n            _context3.next = 9;\n            return _iterator.next();\n\n          case 9:\n            _step = _context3.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context3.next = 13;\n            return _step.value;\n\n          case 13:\n            _value = _context3.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context3.next = 20;\n              break;\n            }\n\n            msg = _value;\n\n            try {\n              onMessage({\n                from: bs58.encode(Buffer.from(msg.from, 'base64')).toString(),\n                data: Buffer.from(msg.data, 'base64'),\n                seqno: Buffer.from(msg.seqno, 'base64'),\n                topicIDs: msg.topicIDs\n              });\n            } catch (err) {\n              err.message = \"Failed to parse pubsub message: \".concat(err.message);\n              onError(err, false, msg); // Not fatal\n            }\n\n          case 17:\n            _iteratorNormalCompletion = true;\n            _context3.next = 7;\n            break;\n\n          case 20:\n            _context3.next = 26;\n            break;\n\n          case 22:\n            _context3.prev = 22;\n            _context3.t0 = _context3[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context3.t0;\n\n          case 26:\n            _context3.prev = 26;\n            _context3.prev = 27;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context3.next = 31;\n              break;\n            }\n\n            _context3.next = 31;\n            return _iterator.return();\n\n          case 31:\n            _context3.prev = 31;\n\n            if (!_didIteratorError) {\n              _context3.next = 34;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 34:\n            return _context3.finish(31);\n\n          case 35:\n            return _context3.finish(26);\n\n          case 36:\n            _context3.next = 41;\n            break;\n\n          case 38:\n            _context3.prev = 38;\n            _context3.t1 = _context3[\"catch\"](2);\n\n            // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n            // Temporarily use the name property instead.\n            if (_context3.t1.type !== 'aborted' && _context3.t1.name !== 'AbortError') {\n              onError(_context3.t1, true); // Fatal\n            }\n\n          case 41:\n            _context3.prev = 41;\n            onEnd();\n            return _context3.finish(41);\n\n          case 44:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[2, 38, 41, 44], [5, 22, 26, 36], [27,, 31, 35]]);\n  }));\n  return _readMessages.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}