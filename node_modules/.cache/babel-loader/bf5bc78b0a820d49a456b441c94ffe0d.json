{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar ndjson = require('iterable-ndjson');\n\nvar multiaddr = require('multiaddr');\n\nvar toIterable = require('stream-to-it/source');\n\nvar configure = require('../lib/configure');\n\nvar toCamel = require('../lib/object-to-camel');\n\nmodule.exports = configure(function (_ref) {\n  var ky = _ref.ky;\n  return (/*#__PURE__*/function () {\n      var _query = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, options) {\n        var searchParams, res, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, message;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = options || {};\n                searchParams = new URLSearchParams(options.searchParams);\n                searchParams.set('arg', \"\".concat(Buffer.isBuffer(peerId) ? new CID(peerId) : peerId));\n                if (options.verbose != null) searchParams.set('verbose', options.verbose);\n                _context.next = 6;\n                return _awaitAsyncGenerator(ky.post('dht/query', {\n                  timeout: options.timeout,\n                  signal: options.signal,\n                  headers: options.headers,\n                  searchParams: searchParams\n                }));\n\n              case 6:\n                res = _context.sent;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 9;\n                _iterator = _asyncIterator(ndjson(toIterable(res.body)));\n\n              case 11:\n                _context.next = 13;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 13:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 17;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 17:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 28;\n                  break;\n                }\n\n                message = _value;\n                message = toCamel(message);\n                message.id = new CID(message.id);\n                message.responses = (message.responses || []).map(function (_ref2) {\n                  var ID = _ref2.ID,\n                      Addrs = _ref2.Addrs;\n                  return {\n                    id: ID,\n                    addrs: (Addrs || []).map(function (a) {\n                      return multiaddr(a);\n                    })\n                  };\n                });\n                _context.next = 25;\n                return message;\n\n              case 25:\n                _iteratorNormalCompletion = true;\n                _context.next = 11;\n                break;\n\n              case 28:\n                _context.next = 34;\n                break;\n\n              case 30:\n                _context.prev = 30;\n                _context.t0 = _context[\"catch\"](9);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 34:\n                _context.prev = 34;\n                _context.prev = 35;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 39;\n                  break;\n                }\n\n                _context.next = 39;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 39:\n                _context.prev = 39;\n\n                if (!_didIteratorError) {\n                  _context.next = 42;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 42:\n                return _context.finish(39);\n\n              case 43:\n                return _context.finish(34);\n\n              case 44:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[9, 30, 34, 44], [35,, 39, 43]]);\n      }));\n\n      function query(_x, _x2) {\n        return _query.apply(this, arguments);\n      }\n\n      return query;\n    }()\n  );\n});","map":null,"metadata":{},"sourceType":"script"}