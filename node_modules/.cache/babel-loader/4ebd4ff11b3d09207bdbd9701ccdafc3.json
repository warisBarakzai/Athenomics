{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/wbarakzai/Documents/1.Spring20/Athenomics/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar dagCBOR = require('ipld-dag-cbor');\n\nvar raw = require('ipld-raw');\n\nvar configure = require('../lib/configure');\n\nvar resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n};\n\nmodule.exports = function (config) {\n  var getBlock = require('../block/get')(config);\n\n  var dagResolve = require('./resolve')(config);\n\n  return configure(function (_ref) {\n    var ky = _ref.ky;\n    return (/*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, path, options) {\n          var resolved, block, dagResolver;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (typeof path === 'object') {\n                    options = path;\n                    path = null;\n                  }\n\n                  options = options || {};\n                  _context.next = 4;\n                  return dagResolve(cid, path, options);\n\n                case 4:\n                  resolved = _context.sent;\n                  _context.next = 7;\n                  return getBlock(resolved.cid, options);\n\n                case 7:\n                  block = _context.sent;\n                  dagResolver = resolvers[block.cid.codec];\n\n                  if (dagResolver) {\n                    _context.next = 11;\n                    break;\n                  }\n\n                  throw Object.assign(new Error(\"Missing IPLD format \\\"\".concat(block.cid.codec, \"\\\"\")), {\n                    missingMulticodec: cid.codec\n                  });\n\n                case 11:\n                  return _context.abrupt(\"return\", dagResolver.resolve(block.data, resolved.remPath));\n\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2, _x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }()\n    );\n  })(config);\n};","map":null,"metadata":{},"sourceType":"script"}